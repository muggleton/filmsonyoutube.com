{"version":3,"sources":["app.js","controllers/linkController.js","controllers/linksController.js","controllers/navigationController.js","directives/infiniteScroll.js","directives/rangeSlider.js","services/linkService.js","services/sidebarService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5GA;AACA;AACA;AACA;AACA;ACJA;ACAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare app and dependancies\nvar app = angular.module('filmsonyoutube', ['ngRoute', 'angular-loading-bar', 'infinite-scroll'], ['$interpolateProvider', '$sceDelegateProvider', 'cfpLoadingBarProvider', function($interpolateProvider, $sceDelegateProvider, cfpLoadingBarProvider) {\n\t$interpolateProvider.startSymbol('<%');\n\t$interpolateProvider.endSymbol('%>');\n\t// Whitelist Youtube URL\n\t$sceDelegateProvider.resourceUrlWhitelist([ 'self','*://www.youtube.com/**']);\n\n\t// Don't show loading bar spinner\n\tcfpLoadingBarProvider.includeSpinner = false;\n\n\t// Infinite scroll performance issues\n\tangular.module('infinite-scroll').value('THROTTLE_MILLISECONDS', 250)\n\n}]);\n\n\napp.run(function(){\n\n});\n\n // Handle our routing\n app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider){\n \t// When on home route\n \t$routeProvider.when('/',{\n \t\t// Load index template\n \t\ttemplateUrl: '/views/links.html',\n \t\t// Use the Link controller\n \t\tcontroller: 'linksController'\n \t});\n\n \t// When on film route\n \t$routeProvider.when('/:id/:title',{\n \t\t// Load index template\n \t\ttemplateUrl: '/views/link.html',\n \t\t// Use the Link controller\n \t\tcontroller: 'linkController'\n \t});\n\n \t// use the HTML5 History API\n \t$locationProvider.html5Mode(true);\n }]);\n","app.controller('linkController', ['$scope', '$routeParams', 'linkService', function($scope, $routeParams, linkService){\n\n\t$scope.init = function() {\n\t\t// Get all links\n\t\tvar link = linkService.get($routeParams.id);\n\n\t\t// If it is successful\n\t\tlink.success(function(response){\n\t\t\t$scope.link = response;\n\t\t});\n\t}\n\n\t$scope.init();\n}]);","app.controller('linksController', ['$rootScope', '$scope', '$q', '$filter', 'linkService', 'sidebarService', function($rootScope, $scope, $q,  $filter, linkService, sidebarService){\n\t$scope.links = [];\n\t$scope.current_page = 1;\n\t$scope.last_page = 0;\n\t$scope.busy = false;\n\t$scope.search_term = '';\n\t$scope.sidebar = [];\n\t$scope.sidebar.rating = [];\n\t$scope.range = [];\n\n\t$scope.genres_query_string = '';\n\t$scope.languages_query_string = '';\n\t$scope.resolutions_query_string = '';\n\n\n\t$scope.init = function() {\n\t\t$scope.busy = true;\n\n\t\tsidebarService.all()\n\t\t.then(function(data){\n\t\t\t$scope.sidebar = data;\n\t\t}, function(error) {\n\t\t\tconsole.log('error', error);\n\t\t});\n\n\t// Get all links\n\tvar links = linkService.all(1, $scope.search_term, $scope.genres_query_string, $scope.resolutions_query_string, $scope.languages_query_string,  0, 10, 0, 10000);\n\n\t\t// If it is successful\n\t\tlinks.success(function(response){\n\t\t\t$scope.current_page = response.current_page;\n\t\t\t$scope.last_page = response.last_page;\n\t\t\t$scope.links = response.data;\n\n\n\t\t});\n\n\t\t$scope.busy = false;\n\n\t}\n\t$scope.loadMore = function()\n\t{\n\t\tif(typeof $scope.sidebar.rating.from === 'undefined') return;\n\t\tif($scope.busy === true) return;\n\t\tif($scope.current_page == $scope.last_page) return;\n\n\t\t$scope.busy = true;\n\n\t\tvar links = linkService.all($scope.current_page + 1, $scope.search_term, $scope.genres_query_string, $scope.resolutions_query_string, $scope.languages_query_string, $scope.sidebar.rating.from, $scope.sidebar.rating.to, $scope.sidebar.year.from, $scope.sidebar.year.to);\n\t\t// If it is successful\n\t\tlinks.success(function(response){\n\t\t\t// For some reason we can't push the entire array to the scope so we will do it one by one\n\t\t\tfor (var i = 0; i < response.data.length; i++) {\n\t\t\t\t$scope.links.push(response.data[i]);\n\t\t\t}\n\t\t\t$scope.current_page = response.current_page;\n\t\t\t$scope.last_page = response.last_page;\n\t\t\t\n\n\t\t});\n\t\t$scope.busy = false;\n\t}\n\n\n\n\t$scope.filterLinks = function() {\n\n\t\t$scope.busy = true;\n\n\t\t// Genres\n\t\t$scope.sidebar.selected_genres = $filter('filter')($scope.sidebar.genres, {checked: true});\n\t\t$scope.genres_query_string = '';\n\t\tfor (var i = 0; i < $scope.sidebar.selected_genres.length; i++) {\n\t\t\t$scope.genres_query_string += ',' + $scope.sidebar.selected_genres[i].id;\n\t\t}\n\n\t\t// Resolution\n\t\t$scope.sidebar.selected_resolutions = $filter('filter')($scope.sidebar.resolutions, {checked: true});\n\t\t$scope.resolutions_query_string = '';\n\t\tfor (var i = 0; i < $scope.sidebar.selected_resolutions.length; i++) {\n\t\t\t$scope.resolutions_query_string += ',' + $scope.sidebar.selected_resolutions[i].id;\n\t\t}\n\n\t\t// Resolution\n\t\t$scope.sidebar.selected_languages = $filter('filter')($scope.sidebar.languages, {checked: true});\n\t\t$scope.languages_query_string = '';\n\t\tfor (var i = 0; i < $scope.sidebar.selected_languages.length; i++) {\n\t\t\t$scope.languages_query_string += ',' + $scope.sidebar.selected_languages[i].id;\n\t\t}\n\n\t\t// Get all links\n\t\tvar links = linkService.all(1, $scope.search_term, $scope.genres_query_string, $scope.resolutions_query_string, $scope.languages_query_string, $scope.sidebar.rating.from, $scope.sidebar.rating.to, $scope.sidebar.year.from, $scope.sidebar.year.to);\n\n\t\t// If it is successful\n\t\tlinks.success(function(response){\n\t\t\t$scope.current_page = response.current_page;\n\t\t\t$scope.last_page = response.last_page;\n\t\t\t$scope.links = response.data;\n\n\t\t});\n\t\t$scope.busy = false;\n\t};\n\n\n\t$scope.init();\n\n\n}]);\n","app.controller('navigationController', ['$scope', '$location', function($scope, $location) {\n\t$scope.isCurrent = function(route) {\n\t\treturn route === $location.path();\n\t};\n}]);","","","app.service('linkService', ['$http', function($http){\n\tvar search_results = [];\n\n\treturn {\n\t\tall: function(page, search_term, genres, resolution, languages, rating_min, rating_max, year_from, year_to){\n\t\t\tvar request = $http({method:'GET', url:'/api/v1/links?page=' + page + '&search=' + search_term + '&genres=' + genres +  '&resolution=' + resolution + '&languages=' + languages + '&rating=' + rating_min + ',' + rating_max + '&year=' + year_from + ',' + year_to});\n\t\t\treturn request;\n\t\t},\n\n\t\tget: function(id){\n\t\t\tvar request = $http({method:'GET', url:'/api/v1/links/' + id});\n\t\t\treturn request;\n\t\t}\n\t}\n}]);","app.service('sidebarService', ['$http', '$q', function($http, $q){\n\treturn {\n\t\tall: function() {\n                // the $http API is based on the deferred/promise APIs exposed by the $q service\n                // so it returns a promise for us by default\n                return $http.get('/api/v1/sidebar')\n                .then(function(response) {\n                \tif (typeof response.data === 'object') {\n                \t\treturn response.data;\n                \t} else {\n                            // invalid response\n                            return $q.reject(response.data);\n                        }\n\n                    }, function(response) {\n                        // something went wrong\n                        return $q.reject(response.data);\n                    });\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}